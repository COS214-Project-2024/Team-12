digraph "CityGame"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{CityGame\n|- running\l- city\l- incomeResourceMap\l- constructionResourceMap\l- collectedResources\l- incomeResources\l- constructionResources\l- savedStates\l- currentSaveIndex\l|+ CityGame()\l+ run()\l- initializeResources()\l- initializeResourceSystem()\l- spawnResources()\l- spawnIncomeResource()\l- spawnConstructionResource()\l- displayMenu()\l- displayCollectedResources()\l- handleSaveGame()\l- handleLoadGame()\l- handlePlaceTransport()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -government" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{Government\n|- money\l- productionRate\l- mortalityRate\l- crimeRate\l- population\l- populationGrowth\l- incomeTax\l- incomeTaxRate\l- EMPLOYMENT_RATE\l- publicServiceAmount\l- utilityAmount\l- residentialAmount\l- processedResources\l- resourceValues\l- pollutionLevel\l|+ Government()\l+ operator=()\l+ displayGovernmentStats()\l+ addMoney()\l+ reduceMoney()\l+ reduceProduction()\l+ increaseProduction()\l+ increaseCrimeRate()\l+ getMoney()\l+ getProductionRate()\land 21 more...\l+ getInstance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGovernment.html",tooltip="The Government class manages the state and functionality of the government in the simulation."];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -grid" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{MapGrid\n|- gridMap\l- incomeResourceMap\l- constructionResourceMap\l- grid\l- width\l- height\l- zoneStyles\l|+ getCell()\l+ setCellSymbol()\l+ setTransportEndpoint()\l+ setTransportPath()\l+ getRandomEmptyLocation()\l+ getHeight()\l+ getWidth()\l+ getAllZones()\l+ getBuildingsInZone()\l+ canPlaceZone()\land 18 more...\l- isOverlappingZone()\l- isCompatibleBuilding()\l- initializeZoneStyles()\l- isZoneBoundary()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMapGrid.html",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -state" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{GameState\n|- commandHistory\l- currentCommandIndex\l|+ createMemento()\l+ restoreFromMemento()\l+ executeCommand()\l+ undo()\l+ redo()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGameState.html",tooltip="Manages the game state and command history."];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -npcManager" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{NPCManager\n|- happinessLevel\l- happyCount\l- neutralCount\l- revoltCount\l- productiveCount\l- crimeCount\l- employedNpcs\l- unemployedNpcs\l|+ NPCManager()\l+ operator=()\l+ getHappinessLevel()\l+ setHappinessLevel()\l+ getDonationCount()\l+ getNeutralCount()\l+ getRevoltCount()\l+ getProductiveCount()\l+ getCrimeCount()\l+ incrementCount()\land 6 more...\l+ getInstance()\l# NPCManager()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classNPCManager.html",tooltip="Singleton class managing the state and statistics of NPCs."];
}
