#include "IncomeResourceProduct.h"

/**
 * @brief Constructs an IncomeResourceProduct with a specified name, quantity, and market value.
 * 
 * @param name Name of the resource.
 * @param quantity Initial quantity of the resource.
 * @param marketValue Market value per unit of the resource.
 */
IncomeResourceProduct::IncomeResourceProduct(string name, int quantity, double marketValue)
    : name(name), quantity(quantity), marketValue(marketValue) {}

/**
 * @brief Destructor for IncomeResourceProduct.
 * 
 * This destructor can handle any necessary cleanup upon object destruction.
 */
IncomeResourceProduct::~IncomeResourceProduct() {
    // cout << "IncomeResourceProduct (" << name << ") destroyed." << endl;
}

/**
 * @brief Consumes a specified amount of the resource, reducing the available quantity.
 * 
 * If the specified amount is available in quantity, it is deducted. Otherwise, an 
 * error message is displayed. The ready status is updated accordingly.
 * 
 * @param amount The amount of the resource to consume.
 */
void IncomeResourceProduct::consumeResources(int amount) {
    if (amount <= quantity) {
        quantity -= amount;
        std::cout << "Consumed " << amount << " units of " << name << ". Remaining: " << quantity << std::endl;
    } else {
        std::cout << "Not enough " << name << " available to consume. Available: " << quantity << std::endl;
    }
    updateReadyStatus();
}

/**
 * @brief Calculates the total income generated by the current quantity of the resource.
 * 
 * @return double Total income generated by the resource (quantity * market value).
 */
double IncomeResourceProduct::calculateIncome() const {
    return quantity * marketValue;
}

/**
 * @brief Gets the market value of the resource.
 * 
 * @return double Market value per unit of the resource.
 */
double IncomeResourceProduct::getMarketValue() const {
    return marketValue;
}

/**
 * @brief Displays detailed information about the resource.
 * 
 * This includes the name, quantity, market value, and total value of the resource.
 */
void IncomeResourceProduct::displayStatus() const {
    std::cout << "Income Resource: " << name
              << "\nQuantity: " << quantity
              << "\nMarket Value per Unit: $" << marketValue
              << "\nTotal Value: $" << calculateIncome() << "\n" << std::endl;
}

/**
 * @brief Gets the current quantity of the resource.
 * 
 * @return int Current quantity available.
 */
int IncomeResourceProduct::getQuantity() const {
    return quantity; 
}

/**
 * @brief Checks if the resource is ready for collection based on a threshold.
 * 
 * The resource is considered ready for collection if the quantity is 150 or more.
 * 
 * @return bool True if the resource is ready for collection, false otherwise.
 */
bool IncomeResourceProduct::isReadyForCollection() {
    if(quantity >= 150) {
        readyForCollection = true;
    } else {
        readyForCollection = false;
    }
    return readyForCollection;
}

/**
 * @brief Adds a specified quantity to the resource, increasing its total amount.
 * 
 * The ready status is updated after replenishment.
 * 
 * @param amount Amount of the resource to add.
 */
void IncomeResourceProduct::replenish(int amount) {
    quantity += amount;
    std::cout << "Replenished " << amount << " units of " << name << ". Total: " << quantity << std::endl;
    updateReadyStatus();
}
