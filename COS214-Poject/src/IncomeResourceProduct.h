#ifndef INCOMERESOURCEPRODUCT_H
#define INCOMERESOURCEPRODUCT_H

#include "CityComponent.h"
#include <iostream>
using namespace std;

/**
 * @brief Represents an income-generating resource in the city.
 * 
 * The IncomeResourceProduct class defines an individual resource that can generate 
 * income when processed. Each resource has a name, quantity, market value, and 
 * a status indicating if it's ready for collection.
 */
class IncomeResourceProduct : public CityComponent {

private:
    std::string name;           /**< Name of the resource */
    int quantity;               /**< Current quantity of the resource */
    double marketValue;         /**< Market value per unit of the resource */
    bool readyForCollection;    /**< Status indicating if the resource is ready for collection */
    Location location;          /**< Location of the resource */

public:
    /**
     * @brief Constructs an IncomeResourceProduct with a specified name, quantity, and market value.
     * 
     * @param name Name of the resource.
     * @param quantity Initial quantity of the resource.
     * @param marketValue Market value per unit of the resource.
     */
    IncomeResourceProduct(string name, int quantity, double marketValue);

    /**
     * @brief Destructor for IncomeResourceProduct.
     */
    ~IncomeResourceProduct();

    /**
     * @brief Consumes a specified amount of the resource, reducing the available quantity.
     * 
     * @param amount Amount of the resource to consume.
     */
    void consumeResources(int amount);

    /**
     * @brief Calculates the total income generated by the resource.
     * 
     * @return double Total income generated by the resource.
     */
    double calculateIncome() const;

    /**
     * @brief Gets the market value of the resource.
     * 
     * @return double Market value per unit of the resource.
     */
    double getMarketValue() const;

    /**
     * @brief Displays detailed information about the resource.
     */
    void displayStatus() const;

    /**
     * @brief Gets the current quantity of the resource.
     * 
     * @return int Current quantity of the resource.
     */
    int getQuantity() const;

    /**
     * @brief Checks if the resource is ready for collection based on a predefined threshold.
     * 
     * @return bool True if the resource is ready for collection, false otherwise.
     */
    bool isReadyForCollection();

    /**
     * @brief Adds a specified quantity to the resource.
     * 
     * @param amount Amount of the resource to add.
     */
    void replenish(int amount);

    /**
     * @brief Accepts a tax collector visitor.
     * 
     * @param TC Pointer to a taxCollector visitor.
     */
    void accept(taxCollector* TC) {}

    /**
     * @brief Gets the type of building associated with this component.
     * 
     * @return std::string Building type as "IncomeResourceProduct".
     */
    std::string getBuildingType() {
        return "IncomeResourceProduct";
    }

    /**
     * @brief Gets the name of the resource.
     * 
     * @return std::string Name of the resource.
     */
    std::string getName() const {
        return name;
    }

    /**
     * @brief Updates the collection readiness status based on quantity.
     */
    void updateReadyStatus() {
        readyForCollection = (quantity >= 150);
    }

    /**
     * @brief Sets the location of the resource.
     * 
     * @param loc Location object to set the resource's position.
     */
    void setLocation(const Location& loc) { location = loc; }

    /**
     * @brief Gets the location of the resource.
     * 
     * @return Location Current location of the resource.
     */
    Location getLocation() const { return location; }

};

#endif
